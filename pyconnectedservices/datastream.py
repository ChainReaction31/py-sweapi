from dataclasses import dataclass

import requests
from oshdatacore.component_implementations import DataRecordComponent
from oshdatacore.encoding import AbstractEncoding

from pyconnectedservices.constants import APITerms, ObservationFormat
from pyconnectedservices.system import System


@dataclass(kw_only=True)
class Datastream:
    """
    Datastreams define the structure of data sent to an OSH Node. They provide a means of defining what and how
    data must be packaged.

    Attributes:
        name: Human readable name for the datastream
        description: A brief description of the datastream
        output_name: The machine name of the datastream, often lowercase and hyphenated (e.g. 'your-output')
        encoding: One of the supported encodings
        root_component: The DataRecordComponent that is the root of the datastream
        obs_format: The observation format of the datastream (e.g. 'application/om+json')
        schema: The JSON schema of the datastream. Generated by create_datastream_schema()
        parent_system: The parent system of the datastream
        __ds_id: The internal id of the datastream
    """
    name: str
    description: str
    output_name: str
    encoding: AbstractEncoding
    root_component: DataRecordComponent
    obs_format: ObservationFormat
    parent_system: System
    schema: dict = None
    __ds_id: str = None

    def get_fields(self):
        return self.root_component.get_fields()

    def create_datastream_schema(self):
        """
        create the schema for the datastream, returns the schema if it already exists
        :return:
        """
        if self.schema is None:
            schema = dict([
                ('obsFormat', self.obs_format),
                ('resultSchema', self.root_component.datastructure_to_dict()),
                ('resultEncoding', self.encoding)
            ])
            self.schema = schema
            return schema
        else:
            return self.schema

    # TODO: Test this method thoroughly
    def insert_datastream(self):
        """
        Insert the datastream into the parent system. Throws an error if the parent system is not set.
        """

        if self.parent_system is not None:
            datastream_dict = dict([
                ('outputName', self.output_name),
                ('name', self.name),
                ('description', self.description),
                ('schema', self.create_datastream_schema()),
            ])

            full_url = f'{self.parent_system.get_system_url()}/{APITerms.DATASTREAMS.value}'
            r = requests.post(full_url, json=datastream_dict, headers={'Content-Type': 'application/json'})
            location = r.headers.get('Location')
            self.__ds_id = location.removeprefix('/datastreams/')
            return self.__ds_id
        else:
            raise ParentSystemNotFound()

    def get_datastream_url(self):
        return f'{self.parent_system.get_system_url()}/{APITerms.DATASTREAMS.value}/{self.__ds_id}'

    def add_root_component(self, component: DataRecordComponent):
        self.root_component = component


class ParentSystemNotFound(Exception):

    def __init__(self, message="Cannot insert datastream without a parent system"):
        self.message = message
        super().__init__(self.message)


class InvalidDatastream(Exception):
    def __init__(self, message=f'The Datastream cannot be built. Please check that all required fields are set'):
        self.message = message
        super().__init__(self.message)
